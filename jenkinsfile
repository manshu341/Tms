pipeline {
    agent any 


    parameters {
        string(name:"VERSION", defaultValue:'', description:'version to deploy')
        choice(name:"Version", choices : ['1.1', '1.2', '1.3'], description:'')
        booleanParam(name:'executeTests', defaultValue:true, description:"skip tests")
    }

    tools {
        maven 'maven'
    }

    
    environment {
        ORG_NAME = "team3"
        APP_NAME = "team3-eureka"
        APP_VERSION = "1.0-SNAPSHOT"
        APP_CONTEXT_ROOT = "/"
        APP_LISTENING_PORT = "8761"
        TEST_CONTAINER_NAME = "ci-${APP_NAME}-${BUILD_NUMBER}"
        PREV_CONTAINER_NAME="ci-${APP_NAME}-${currentBuild.previousBuild.number}"
    }

  stages {
    stage('Compile') {
        steps {
            echo "-=- compiling project -=-"
            
            bat "mvn clean compile"
        }
    }
  

    stage('Package') {

        when {
            expression {
                params.executeTests
            }
        }

        steps {
            echo "-=- packaging project -=-"
            bat "mvn package -DskipTests=${params.executeTests}"
            archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
        }
    }

    stage ('Killing Containers') {
        steps {

            echo "====== killing Containers====="
            script {
                try {
                    bat "docker rm eureka-server"
                }catch(Exception e) {
                    echo e.getMessage() 
                    echo "Container not found eureka-server"
                }
            }
        }
    }



    stage('Build Docker image') {
        steps {
            echo "-=- build Docker image -=-"
            bat "docker build -t ${ORG_NAME}/${APP_NAME}:${APP_VERSION} -t team3-eureka:latest ."
        }
    }

   stage('Run Docker image') {
            steps {
                echo "-=- run Docker image -=-"
                echo "Executing  ${VERSION}"
                bat "docker run --name=eureka-server --detach --restart=always --network network -p 8761:8761 team3-eureka:latest"
            }
        }


  }
}